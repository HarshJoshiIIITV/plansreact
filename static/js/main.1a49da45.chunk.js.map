{"version":3,"sources":["Plans.js","Addplan.js","App.js","serviceWorker.js","index.js"],"names":["Plans","_ref","plans","deletePlan","react_default","a","createElement","className","length","map","plan","key","id","onClick","content","Addplan","state","handleChange","e","_this","setState","target","value","handleSubmit","preventDefault","props","addPlan","onSubmit","this","type","onChange","Component","particleOpt","particles","number","density","enable","value_area","App","filter","Math","random","concat","Object","toConsumableArray","particles_default","params","src_Plans","src_Addplan","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qQA2BeA,cAxBH,SAAAC,GAAsB,IAApBC,EAAoBD,EAApBC,MAAMC,EAAcF,EAAdE,WACnB,OACCC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAEZL,EAAMM,OAAO,EAGZN,EAAMO,IAAI,SAAAC,GACT,OACCN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mCAAmCI,IAAKD,EAAKE,IAC3DR,EAAAC,EAAAC,cAAA,QAAOO,QAAS,WAAKV,EAAWO,EAAKE,MAAOF,EAAKI,QAAjD,QAOHV,EAAAC,EAAAC,cAAA,KAAGC,UAAU,QAAb,2BCWSQ,6MA3BdC,MAAM,CACLF,QAAQ,MAETG,aAAa,SAACC,GACbC,EAAKC,SAAS,CACbN,QAAQI,EAAEG,OAAOC,WAGnBC,aAAa,SAACL,GACbA,EAAEM,iBACFL,EAAKM,MAAMC,QAAQP,EAAKH,OACxBG,EAAKC,SAAS,CACbN,QAAQ,8EAKT,OACCV,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAA,QAAMqB,SAAUC,KAAKL,cACpBnB,EAAAC,EAAAC,cAAA,SAAOC,UAAU,kBAAjB,mBACAH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,sFAAsFsB,KAAK,OAAOC,SAAUF,KAAKX,aAAcK,MAAOM,KAAKZ,MAAMF,mBAtBjJiB,6BCKhBC,EAAY,CAChBC,UAAU,CACRC,OAAO,CACLZ,MAAM,IACNa,QAAQ,CACNC,QAAO,EACPC,WAAW,QAoDJC,6MA1CbtB,MAAM,CACJd,MAAM,CACJ,CAACU,GAAG,EAAEE,QAAQ,2BACd,CAACF,GAAG,EAAEE,QAAQ,6BACd,CAACF,GAAG,EAAEE,QAAQ,wBACd,CAACF,GAAG,EAAEE,QAAQ,yBAIlBX,WAAW,SAACS,GACV,IAAMV,EAAMiB,EAAKH,MAAMd,MAAMqC,OAAO,SAAA7B,GAClC,OAAOA,EAAKE,KAAKA,IAGnBO,EAAKC,SAAS,CACZlB,MAAMA,OAIVwB,QAAQ,SAAChB,GACPA,EAAKE,GAAG4B,KAAKC,SACb,IAAIvC,EAAK,GAAAwC,OAAAC,OAAAC,EAAA,EAAAD,CAAKxB,EAAKH,MAAMd,OAAhB,CAAsBQ,IAC/BS,EAAKC,SAAS,CACZlB,MAAMA,6EAKR,OACEE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACuC,EAAAxC,EAAD,CAAWE,UAAU,YACfuC,OAAQd,IAEd5B,EAAAC,EAAAC,cAAA,MAAIC,UAAU,wCAAd,aACAH,EAAAC,EAAAC,cAACyC,EAAD,CAAO7C,MAAO0B,KAAKZ,MAAMd,MAAOC,WAAYyB,KAAKzB,aACjDC,EAAAC,EAAAC,cAAC0C,EAAD,CAAStB,QAASE,KAAKF,kBArCbK,aCVEkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnD,EAAAC,EAAAC,cAACkD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.1a49da45.chunk.js","sourcesContent":["import React,{Component} from 'react';\r\nimport 'tachyons';\r\n\r\nconst Plans=({plans,deletePlan})=>{\r\n\treturn(\r\n\t\t<div className=\"plans\">\r\n\t\t{\r\n\t\t\t\t\tplans.length>0\r\n\t\t\t\t\t?\r\n\t\t\t\t\t(\r\n\t\t\t\t\t\tplans.map(plan=>{\r\n\t\t\t\t\t\t\treturn(\r\n\t\t\t\t\t\t\t\t<div className=\"plan b f3 mid-gray garamond mb4 \" key={plan.id}>\r\n\t\t\t\t\t\t\t\t\t<span  onClick={()=>{deletePlan(plan.id)}}>{plan.content} </span>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t)\r\n\t\t\t\t\t:\r\n\t\t\t\t\t(\r\n\t\t\t\t\t\t<p className=\"f3 b\"> Congrats all done !</p>\r\n\t\t\t\t\t)\r\n\t\t}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Plans;","import React,{Component} from 'react';\r\nimport 'tachyons';\r\n\r\nclass Addplan extends Component{\r\n\tstate={\r\n\t\tcontent:''\r\n\t}\r\n\thandleChange=(e)=>{\r\n\t\tthis.setState({\r\n\t\t\tcontent:e.target.value\r\n\t\t})\r\n\t}\r\n\thandleSubmit=(e)=>{\r\n\t\te.preventDefault();\r\n\t\tthis.props.addPlan(this.state);\r\n\t\tthis.setState({\r\n\t\t\tcontent:''\r\n\t\t})\r\n\t}\r\n\r\n\trender(){\r\n\t\treturn(\r\n\t\t\t<div>\r\n\t\t\t\t<form onSubmit={this.handleSubmit}>\r\n\t\t\t\t\t<label className=\"f3 garamond b \"> Add new plan: </label>\r\n\t\t\t\t\t<input className=\"b pa2 ml3 br3 ml2 mt3 input-reset ba bg-transparent hover-bg-black hover-white w-25\" type=\"text\" onChange={this.handleChange} value={this.state.content}/>\r\n\t\t\t\t</form>\r\n\t\t\t</div>\r\n\t\t\t)\r\n\t}\r\n}\r\nexport default Addplan; ","import React,{Component} from 'react';\nimport './App.css';\nimport Plans from './Plans';\nimport Addplan from './Addplan';\nimport Particles from 'react-particles-js';\nimport 'tachyons';\n\n\nconst particleOpt={\n  particles:{\n    number:{\n      value:200,\n      density:{\n        enable:true,\n        value_area:700\n      }\n    }\n  }\n}\n\n\n\nclass App extends Component {\n\n  state={\n    plans:[\n      {id:1,content:'Geeks for geeks round-1'},\n      {id:2,content:'Codechef summer challenge'},\n      {id:3,content:'Codeforces SummerCup'},\n      {id:4,content:'Cook-a-code IIITV'}\n    ]\n  }  \n\n  deletePlan=(id)=>{\n    const plans=this.state.plans.filter(plan=>{\n      return plan.id!==id;\n    });\n\n    this.setState({\n      plans:plans\n    })\n  }\n\n  addPlan=(plan)=>{\n    plan.id=Math.random();\n    let plans=[...this.state.plans,plan];\n    this.setState({\n      plans:plans\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Particles className='particles' \n              params={particleOpt}    \n          />\n        <h1 className=\"f1 dark-gray mt0 mb5 bb ttu  tracked\">Plan Here</h1>\n        <Plans plans={this.state.plans} deletePlan={this.deletePlan} /> \n        <Addplan addPlan={this.addPlan} />\n       \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}